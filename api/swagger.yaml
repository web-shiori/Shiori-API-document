---
swagger: "2.0"
info:
  description: "TechTrain MISSION ゲームAPI入門仕様\n まずはこのAPI仕様に沿って機能を実装してみましょう。\n \n この\
    画面の各APIの「Try it out」->「Execute」を利用することで\n ローカル環境で起動中のAPIにAPIリクエストをすることができます。"
  version: "1.0.0"
  title: "TechTrain MISSION Game API"
host: "localhost:8080"
tags:
- name: "user"
  description: "ユーザ関連API"
- name: "gacha"
  description: "ガチャ関連API"
- name: "character"
  description: "キャラクター関連API"
schemes:
- "http"
paths:
  /user/create:
    post:
      tags:
      - "user"
      summary: "ユーザ情報作成API"
      description: "ユーザ情報を作成します。\n ユーザの名前情報をリクエストで受け取り、ユーザIDと認証用のトークンを生成しデータベースへ保存\
        します。"
      operationId: "userCreatePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request Body"
        required: true
        schema:
          $ref: "#/definitions/UserCreateRequest"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/UserCreateResponse"
      x-swagger-router-controller: "User"
  /user/get:
    get:
      tags:
      - "user"
      summary: "ユーザ情報取得API"
      description: "ユーザ情報を取得します。\n ユーザの認証と特定の処理はリクエストヘッダのx-tokenを読み取ってデータベースに照会をしま\
        す。"
      operationId: "userGetGET"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "x-token"
        in: "header"
        description: "認証トークン"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/UserGetResponse"
      x-swagger-router-controller: "User"
  /user/update:
    put:
      tags:
      - "user"
      summary: "ユーザ情報更新API"
      description: "ユーザ情報の更新をします。\n 初期実装では名前の更新を行います。"
      operationId: "userUpdatePUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "x-token"
        in: "header"
        description: "認証トークン"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Request Body"
        required: true
        schema:
          $ref: "#/definitions/UserUpdateRequest"
      responses:
        "200":
          description: "A successful response."
      x-swagger-router-controller: "User"
  /gacha/draw:
    post:
      tags:
      - "gacha"
      summary: "ガチャ実行API"
      description: "ガチャを引いてキャラクターを取得する処理を実装します。\n 獲得したキャラクターはユーザ所持キャラクターテーブルへ保存します\
        。\n 同じ種類のキャラクターでもユーザは複数所持することができます。\n \n キャラクターの確率は等倍ではなく、任意に変更できるようテーブルを設\
        計しましょう。"
      operationId: "gachaDrawPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "x-token"
        in: "header"
        description: "認証トークン"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Request Body"
        required: true
        schema:
          $ref: "#/definitions/GachaDrawRequest"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/GachaDrawResponse"
      x-swagger-router-controller: "Gacha"
  /character/list:
    get:
      tags:
      - "character"
      summary: "ユーザ所持キャラクター一覧取得API"
      description: "ユーザが所持しているキャラクター一覧情報を取得します。"
      operationId: "characterListGET"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "x-token"
        in: "header"
        description: "認証トークン"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/CharacterListResponse"
      x-swagger-router-controller: "Character"
definitions:
  UserCreateRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "ユーザ名"
    example:
      name: "name"
  UserCreateResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "クライアント側で保存するトークン"
    example:
      token: "token"
  UserGetResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "ユーザ名"
    example:
      name: "name"
  UserUpdateRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "ユーザ名"
    example:
      name: "name"
  GachaDrawRequest:
    type: "object"
    properties:
      times:
        type: "integer"
        description: "実行回数"
    example:
      times: 0
  GachaDrawResponse:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/GachaResult"
    example:
      results:
      - name: "name"
        characterID: "characterID"
      - name: "name"
        characterID: "characterID"
  GachaResult:
    type: "object"
    properties:
      characterID:
        type: "string"
        description: "キャラクターID"
      name:
        type: "string"
        description: "キャラクター名"
    example:
      name: "name"
      characterID: "characterID"
  CharacterListResponse:
    type: "object"
    properties:
      characters:
        type: "array"
        items:
          $ref: "#/definitions/UserCharacter"
    example:
      characters:
      - userCharacterID: "userCharacterID"
        name: "name"
        characterID: "characterID"
      - userCharacterID: "userCharacterID"
        name: "name"
        characterID: "characterID"
  UserCharacter:
    type: "object"
    properties:
      userCharacterID:
        type: "string"
        description: "ユニークID"
      characterID:
        type: "string"
        description: "キャラクターID"
      name:
        type: "string"
        description: "キャラクター名"
    example:
      userCharacterID: "userCharacterID"
      name: "name"
      characterID: "characterID"
